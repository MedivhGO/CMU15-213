                     0x000000000040110b <+23>:    mov    %rsp,%r14 0x7fffffffe380
                     0x000000000040110e <+26>:    mov    $0x0,%r12d 0
                     0x0000000000401114 <+32>:    mov    %r13,%rbp 140737488348032
                     0x0000000000401117 <+35>:    mov    0x0(%r13),%eax  1
                     0x000000000040111b <+39>:    sub    $0x1,%eax 0 //第一个数减去1,第二个数减去1,第三个数减去1
                     0x000000000040111e <+42>:    cmp    $0x5,%eax 
                     0x0000000000401121 <+45>:    jbe    0x401128 <phase_6+52> eax <= 5 减1之后必须<=5 所以暂时第一个数必须小于等于6 无符号
                     0x0000000000401123 <+47>:    callq  0x40143a <explode_bomb>
                     0x0000000000401128 <+52>:    add    $0x1,%r12d 1
                     0x000000000040112c <+56>:    cmp    $0x6,%r12d 
                     0x0000000000401130 <+60>:    je     0x401153 <phase_6+95>
                     0x0000000000401132 <+62>:    mov    %r12d,%ebx 1
                     0x0000000000401135 <+65>:    movslq %ebx,%rax 1
                     0x0000000000401138 <+68>:    mov    (%rsp,%rax,4),%eax 第二个数给eax 第三个数给eax
                     0x000000000040113b <+71>:    cmp    %eax,0x0(%rbp) 第二个数与第一个数相比较 第三个数与第一个数相比较也不同
                     0x000000000040113e <+74>:    jne    0x401145 <phase_6+81> //不相等
                     0x0000000000401140 <+76>:    callq  0x40143a <explode_bomb> //相等爆炸
                     0x0000000000401145 <+81>:    add    $0x1,%ebx  2
                     0x0000000000401148 <+84>:    cmp    $0x5,%ebx  判断是否和5相等 ebx <= 5
                     0x000000000040114b <+87>:    jle    0x401135 <phase_6+65> 小于等于5就跳到前面 (判断每个数都不能与前面一个数相同)
                     0x000000000040114d <+89>:    add    $0x4,%r13 r13向后移动4个字节(移动双字) //ebx=6
                     0x0000000000401151 <+93>:    jmp    0x401114 <phase_6+32> //继续判断第二个数 必须小于等于6  
                     
                     //也就是说这6个数 每个数都在[1,6]之间,而且互不相同,也就是1-6的全排列中的一个
                     
                     
                     
                     
                     0x0000000000401153 <+95>:    lea    0x18(%rsp),%rsi //将栈指针挪动24个字节,也就是6个数之后 register info显示的是0
                     0x0000000000401158 <+100>:   mov    %r14,%rax //6个数的起始位置
                     0x000000000040115b <+103>:   mov    $0x7,%ecx 7
                     0x0000000000401160 <+108>:   mov    %ecx,%edx 7
                     0x0000000000401162 <+110>:   sub    (%rax),%edx //第一个数 7-第一个数
                     0x0000000000401164 <+112>:   mov    %edx,(%rax) //存回原来的位置
                     0x0000000000401166 <+114>:   add    $0x4,%rax //rax+4 指向第二个数
                     0x000000000040116a <+118>:   cmp    %rsi,%rax  //判断rax是否遍历完所有6个数
                     0x000000000040116d <+121>:   jne    0x401160 <phase_6+108> //没有就继续执行7-第二个,第三..
                     
                     //现在所有数都是7-x 
                     
                     
                     0x000000000040116f <+123>:   mov    $0x0,%esi 将si置0
                     0x0000000000401174 <+128>:   jmp    0x401197 <phase_6+163>
                     0x0000000000401176 <+130>:   mov    0x8(%rdx),%rdx  //M(6304472) = 6304480
                     0x000000000040117a <+134>:   add    $0x1,%eax 2
                     0x000000000040117d <+137>:   cmp    %ecx,%eax //第二个元素
                     0x000000000040117f <+139>:   jne    0x401176 <phase_6+130>
                     0x0000000000401181 <+141>:   jmp    0x401188 <phase_6+148>
                     0x0000000000401183 <+143>:   mov    $0x6032d0,%edx //edx赋给定制  6304464
                     0x0000000000401188 <+148>:   mov    %rdx,0x20(%rsp,%rsi,2) // rsp 指向的位置后32字节.也就是8个数据的位置 也就是 6个元素后2个元素
                     0x000000000040118d <+153>:   add    $0x4,%rsi //si指向后一个元素
                     0x0000000000401191 <+157>:   cmp    $0x18,%rsi //si是不是六个元素的最后一个
                     0x0000000000401195 <+161>:   je     0x4011ab <phase_6+183>
                     0x0000000000401197 <+163>:   mov    (%rsp,%rsi,1),%ecx  //rsp指向第一个输入元素,第二个,第三个
                     0x000000000040119a <+166>:   cmp    $0x1,%ecx  //ecx 存放第一个输入元素 ecx <= 1 
                     0x000000000040119d <+169>:   jle    0x401183 <phase_6+143> //如果<=1 就到143 大于1就继续
                     0x000000000040119f <+171>:   mov    $0x1,%eax 1
                     0x00000000004011a4 <+176>:   mov    $0x6032d0,%edx //6304464
                     0x00000000004011a9 <+181>:   jmp    0x401176 <phase_6+130> 
                     0x00000000004011ab <+183>:   mov    0x20(%rsp),%rbx //链表的首个元素
                     0x00000000004011b0 <+188>:   lea    0x28(%rsp),%rax //链表的第二个地址
                     0x00000000004011b5 <+193>:   lea    0x50(%rsp),%rsi //链表的最后一个元素的地址
                     0x00000000004011ba <+198>:   mov    %rbx,%rcx //首个元素给cx
                     0x00000000004011bd <+201>:   mov    (%rax),%rdx //第二个元素给dx
                     0x00000000004011c0 <+204>:   mov    %rdx,0x8(%rcx) //链表的
                     0x00000000004011c4 <+208>:   add    $0x8,%rax
                     0x00000000004011c8 <+212>:   cmp    %rsi,%rax
                     0x00000000004011cb <+215>:   je     0x4011d2 <phase_6+222>
                     0x00000000004011cd <+217>:   mov    %rdx,%rcx
                     0x00000000004011d0 <+220>:   jmp    0x4011bd <phase_6+201>
                     0x00000000004011d2 <+222>:   movq   $0x0,0x8(%rdx)
                     0x00000000004011da <+230>:   mov    $0x5,%ebp
                     0x00000000004011df <+235>:   mov    0x8(%rbx),%rax
                     0x00000000004011e3 <+239>:   mov    (%rax),%eax
                     0x00000000004011e5 <+241>:   cmp    %eax,(%rbx)
                     0x00000000004011e7 <+243>:   jge    0x4011ee <phase_6+250>
                     0x00000000004011e9 <+245>:   callq  0x40143a <explode_bomb>
                     0x00000000004011ee <+250>:   mov    0x8(%rbx),%rbx
                     0x00000000004011f2 <+254>:   sub    $0x1,%ebp
                     0x00000000004011f5 <+257>:   jne    0x4011df <phase_6+235>
                     0x00000000004011f7 <+259>:   add    $0x50,%rsp
                    
